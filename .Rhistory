as_tibble(seq(from = growth_rate, to = terminal_g, length.out = length)) %>%
rename(Growth = value) %>%
mutate(DIV = Div_latest)
as_tibble(seq(from = growth_rate, to = terminal_g, length.out = length)) %>%
rename(Growth = value) %>%
mutate(DIV = Div_latest*growth_rate)
as_tibble(seq(from = growth_rate, to = terminal_g, length.out = length)) %>%
rename(Growth = value) %>%
mutate(DIV = Div_latest*growth_rate) %>%
mutate(Div_new = if_else(row_number() > 1, Growth*lag(DIV, n=1)))
as_tibble(seq(from = growth_rate, to = terminal_g, length.out = length)) %>%
rename(Growth = value) %>%
mutate(DIV = Div_latest*growth_rate) %>%
mutate(Div_new = if_else(row_number() > 1, Growth*lag(DIV, n=1), NA))
as_tibble(seq(from = growth_rate, to = terminal_g, length.out = length)) %>%
rename(Growth = value) %>%
mutate(DIV = Div_latest*growth_rate) %>%
mutate(Div_new = if_else(row_number() > 1, Growth*lag(DIV, n=1), 0))
as_tibble(seq(from = growth_rate, to = terminal_g, length.out = length)) %>%
rename(Growth = value) %>%
mutate(Growth = Growth + 1) %>%
mutate(DIV = Div_latest*growth_rate) %>%
mutate(Div_new = if_else(row_number() > 1, Growth*lag(DIV, n=1), 0))
0.182*1.1
CFs <- as_tibble(seq(from = growth_rate, to = terminal_g, length.out = length)) %>%
rename(Growth = value) %>%
mutate(Growth = Growth + 1) %>%
mutate(DIV = Div_latest*growth_rate)
View(CFs)
Div_ <- CFs %>% filter(row_number() == 1) %>% pull(DIV)
CFs <- CFs %>%
mutate(DIV = if_else(row_number() == i, Growth*Div_, DIV))
for (i in 2:nrow(CFs)) {
CFs <- CFs %>%
mutate(DIV = if_else(row_number() == i, Growth*Div_, DIV))
Div_ <- CFs %>% filter(row_number() == i) %>% pull(DIV)
}
CFs %>%
mutate(period = row_number()) %>%
mutate(DF = RR^(period))
RR <- Req + 1
CFs %>%
mutate(period = row_number()) %>%
mutate(DF = RR^(period))
CFs %>%
mutate(period = row_number()) %>%
mutate(DF = RR^(period)) %>%
mutate(DF = if_else(row_number() == length, (Req - terminal_g), DF))
CFs %>%
mutate(period = row_number()) %>%
mutate(DF = RR^(period)) %>%
mutate(CF = DIV/DF)
CFs %>%
mutate(period = row_number()) %>%
mutate(DF = RR^(period)) %>%
mutate(CF = DIV/DF) %>%
mutate(CF = if_else(row_number() == length, CF/(Req - terminal_g), CF))
View(Divs)
CFs <- as_tibble(seq(from = growth_rate, to = terminal_g, length.out = length)) %>%
rename(Growth = value) %>%
mutate(Growth = Growth + 1) %>%
mutate(DIV = Div_latest*(1+growth_rate))
Div_ <- CFs %>% filter(row_number() == 1) %>% pull(DIV)
for (i in 2:nrow(CFs)) {
CFs <- CFs %>%
mutate(DIV = if_else(row_number() == i, Growth*Div_, DIV))
Div_ <- CFs %>% filter(row_number() == i) %>% pull(DIV)
}
RR <- Req + 1
CFs %>%
mutate(period = row_number()) %>%
mutate(DF = RR^(period)) %>%
mutate(CF = DIV/DF) %>%
mutate(CF = if_else(row_number() == length, CF/(Req - terminal_g), CF))
DDM_out <- sum(CFs %>% pull(CF))
CFs <- CFs %>%
mutate(period = row_number()) %>%
mutate(DF = RR^(period)) %>%
mutate(CF = DIV/DF) %>%
mutate(CF = if_else(row_number() == length, CF/(Req - terminal_g), CF))
DDM_out <- sum(CFs %>% pull(CF))
#' @title Multi_DDM
#' @description The function calculates stock value based on a single stage DDM model (Gordon Growth Model)
#' @param Ticker  Provide the stock ticker, which will be searched for on morningstar and yahoo finance
#' @param Req The required rate of return used for discounting
#' @param growth_rate growth_rate now
#' @param terminal_g The terminal growth rate
#' @param length The discounted length from first to terminal dividend, default is 5
#' @export
#' @seealso \code{\link[tidyquant]{tq_get}}
#' @return DDM_Out The results of the DDM model
#' @examples \dontrun {
#'
#'
#'
#'
#' }
Multi_DDM <- function(Ticker, Req, growth_rate, terminal_g, length = 5) {
# Get Morningstar data
MData <- tq_get(Ticker, get = "key.ratios")
# What do you need for a DDM?
# 1. The required rate of return
# 2. The terminal growth rate g
# 3. The latest dividend
Divs <- MData %>%
filter(section == "Financials") %>%
select(data) %>% unnest() %>%
filter(category == "Dividends USD")
Div_latest <- Divs %>%
filter(row_number() == nrow(Divs)) %>% pull(value)
# 4. The ROE
ROE <- MData %>%
filter(section == "Profitability") %>%
select(data) %>% unnest() %>%
filter(category == "Return on Equity %")
ROE_latest <- ROE %>%
filter(row_number() == nrow(ROE))
# 5. Calculate dividends and discount
# Create a growth (g) vector and create CFs from dividends
CFs <- as_tibble(seq(from = growth_rate, to = terminal_g, length.out = length)) %>%
rename(Growth = value) %>%
mutate(Growth = Growth + 1) %>%
mutate(DIV = Div_latest*(1+growth_rate))
Div_ <- CFs %>% filter(row_number() == 1) %>% pull(DIV)
for (i in 2:nrow(CFs)) {
CFs <- CFs %>%
mutate(DIV = if_else(row_number() == i, Growth*Div_, DIV))
Div_ <- CFs %>% filter(row_number() == i) %>% pull(DIV)
}
# Discount dividends
RR <- Req + 1
CFs <- CFs %>%
mutate(period = row_number()) %>%
mutate(DF = RR^(period)) %>%
mutate(CF = DIV/DF) %>%
mutate(CF = if_else(row_number() == length, CF/(Req - terminal_g), CF))
# Return the sum of CFs
DDM_out <- sum(CFs %>% pull(CF))
return(DDM_out)
}
Ticker <- "MSFT"
Req <- 0.12
growth_rate <- 0.11
terminal_g <- 0.08
length <- 5
Multi_Stage_DDM <- Multi_DDM(Ticker, Req, growth_rate, terminal_g, length)
Ticker <- "AAPL"
year <- 2017
Calculate_FCFF(Ticker, year)
#' @title Calculate_FCFF
#' @description The function calculates the free cash flow to firm (FCFF) using the cash flow financials from GetCashFlow function and the Morningstar data.
#'              The FCFF is calculated from the Net Income, Change in working capital, depreciation expense and Capital expenditures (CAPEX).
#' @param Ticker Ticker of the stock to be evaluated
#' @param year Year to calculate FCFF for
#' @export
#' @seealso \code{\link[finreportr]{GetCashFlow()}}
#' @return FCFF Returns the calculated FCFF
#' @examples
Calculate_FCFF <- function(Ticker, year) {
# Get Cash flow and Income Statement data
CF_Data <- GetCashFlow(Ticker, year)
Fin <- tq_get(Tikcer, get = "Key.ratios") %>%
filter(section == "Financials") %>%
select(data) %>% unnest()
# Only include data from the year provided by user
CF_Data <- CF_Data %>%
mutate(What_Year = year(endDate)) %>%
filter(What_Year == year)
IS_Data <- IS_Data %>%
mutate(What_Year = year(endDate)) %>%
filter(What_Year == year)
# Start by finding the NI
NI <- CF_Data %>%
filter(Metric == "Net Income (Loss) Attributable to Parent")
# Only keep most recent number
if (nrow(NI) > 1) {
NI <- NI %>% filter(row_number() == nrow(NI)) %>% pull(Amount)
} else{
NI <- NI  %>% pull(Amount)
}
# Get the CAPEX
CAPEX <- CF_Data %>%
filter(Metric == "Payments to Acquire Property, Plant, and Equipment") %>% pull(Amount)
# Get Depreciation expense
Dep_Expense <- CF_Data %>%
filter(Metric == "Depreciation, Amortization and Accretion, Net") %>% pull(Amount)
# Calculate the change in working capital
WC <- Fin %>%
filter(category == "Working Capital USD Mil")
WC_old <- WC %>%
filter(row_number() == (nrow(WC) - 1)) %>% pull(value)
WC_new <- WC %>%
filter(row_number() == nrow(WC)) %>% pull(value)
change_in_WC <- WC_new - WC_old
# Calculate FCFF
FCFF <- NI + Dep_Expense - CAPEX - change_in_WC
return(FCFF)
}
Calculate_FCFF(Ticker, year)
#' @title Calculate_FCFF
#' @description The function calculates the free cash flow to firm (FCFF) using the cash flow financials from GetCashFlow function and the Morningstar data.
#'              The FCFF is calculated from the Net Income, Change in working capital, depreciation expense and Capital expenditures (CAPEX).
#' @param Ticker Ticker of the stock to be evaluated
#' @param year Year to calculate FCFF for
#' @export
#' @seealso \code{\link[finreportr]{GetCashFlow()}}
#' @return FCFF Returns the calculated FCFF
#' @examples
Calculate_FCFF <- function(Ticker, year) {
# Get Cash flow and Income Statement data
CF_Data <- GetCashFlow(Ticker, year)
Fin <- tq_get(Ticker, get = "Key.ratios") %>%
filter(section == "Financials") %>%
select(data) %>% unnest()
# Only include data from the year provided by user
CF_Data <- CF_Data %>%
mutate(What_Year = year(endDate)) %>%
filter(What_Year == year)
IS_Data <- IS_Data %>%
mutate(What_Year = year(endDate)) %>%
filter(What_Year == year)
# Start by finding the NI
NI <- CF_Data %>%
filter(Metric == "Net Income (Loss) Attributable to Parent")
# Only keep most recent number
if (nrow(NI) > 1) {
NI <- NI %>% filter(row_number() == nrow(NI)) %>% pull(Amount)
} else{
NI <- NI  %>% pull(Amount)
}
# Get the CAPEX
CAPEX <- CF_Data %>%
filter(Metric == "Payments to Acquire Property, Plant, and Equipment") %>% pull(Amount)
# Get Depreciation expense
Dep_Expense <- CF_Data %>%
filter(Metric == "Depreciation, Amortization and Accretion, Net") %>% pull(Amount)
# Calculate the change in working capital
WC <- Fin %>%
filter(category == "Working Capital USD Mil")
WC_old <- WC %>%
filter(row_number() == (nrow(WC) - 1)) %>% pull(value)
WC_new <- WC %>%
filter(row_number() == nrow(WC)) %>% pull(value)
change_in_WC <- WC_new - WC_old
# Calculate FCFF
FCFF <- NI + Dep_Expense - CAPEX - change_in_WC
return(FCFF)
}
Calculate_FCFF(Ticker, year)
#' @title Calculate_FCFF
#' @description The function calculates the free cash flow to firm (FCFF) using the cash flow financials from GetCashFlow function and the Morningstar data.
#'              The FCFF is calculated from the Net Income, Change in working capital, depreciation expense and Capital expenditures (CAPEX).
#' @param Ticker Ticker of the stock to be evaluated
#' @param year Year to calculate FCFF for
#' @export
#' @seealso \code{\link[finreportr]{GetCashFlow()}}
#' @return FCFF Returns the calculated FCFF
#' @examples
Calculate_FCFF <- function(Ticker, year) {
# Get Cash flow and Income Statement data
CF_Data <- GetCashFlow(Ticker, year)
Fin <- tq_get(Ticker, get = "Key.ratios") %>%
filter(section == "Financials") %>%
select(data) %>% unnest()
# Only include data from the year provided by user
CF_Data <- CF_Data %>%
mutate(What_Year = year(endDate)) %>%
filter(What_Year == year)
# Start by finding the NI
NI <- CF_Data %>%
filter(Metric == "Net Income (Loss) Attributable to Parent")
# Only keep most recent number
if (nrow(NI) > 1) {
NI <- NI %>% filter(row_number() == nrow(NI)) %>% pull(Amount)
} else{
NI <- NI  %>% pull(Amount)
}
# Get the CAPEX
CAPEX <- CF_Data %>%
filter(Metric == "Payments to Acquire Property, Plant, and Equipment") %>% pull(Amount)
# Get Depreciation expense
Dep_Expense <- CF_Data %>%
filter(Metric == "Depreciation, Amortization and Accretion, Net") %>% pull(Amount)
# Calculate the change in working capital
WC <- Fin %>%
filter(category == "Working Capital USD Mil")
WC_old <- WC %>%
filter(row_number() == (nrow(WC) - 1)) %>% pull(value)
WC_new <- WC %>%
filter(row_number() == nrow(WC)) %>% pull(value)
change_in_WC <- WC_new - WC_old
# Calculate FCFF
FCFF <- NI + Dep_Expense - CAPEX - change_in_WC
return(FCFF)
}
Calculate_FCFF(Ticker, year)
CF_Data <- GetCashFlow(Ticker, year)
Fin <- tq_get(Ticker, get = "Key.ratios") %>%
filter(section == "Financials") %>%
select(data) %>% unnest()
CF_Data <- CF_Data %>%
mutate(What_Year = year(endDate)) %>%
filter(What_Year == year)
NI <- CF_Data %>%
filter(Metric == "Net Income (Loss) Attributable to Parent")
if (nrow(NI) > 1) {
NI <- NI %>% filter(row_number() == nrow(NI)) %>% pull(Amount)
} else{
NI <- NI  %>% pull(Amount)
}
NI <- CF_Data %>%
filter(Metric == "Net Income (Loss) Attributable to Parent")
if (nrow(NI) > 1) {
NI <- as.numeric(NI %>% filter(row_number() == nrow(NI)) %>% pull(Amount))
} else{
NI <- as.numeric(NI  %>% pull(Amount))
}
CAPEX <- CF_Data %>%
filter(Metric == "Payments to Acquire Property, Plant, and Equipment") %>% pull(Amount)
CAPEX <- as.numeric(CF_Data %>%
filter(Metric == "Payments to Acquire Property, Plant, and Equipment") %>% pull(Amount))
Dep_Expense <- as.numeric(CF_Data %>%
filter(Metric == "Depreciation, Amortization and Accretion, Net") %>% pull(Amount))
WC <- Fin %>%
filter(category == "Working Capital USD Mil")
WC_old <- WC %>%
filter(row_number() == (nrow(WC) - 1)) %>% pull(value)
WC_new <- WC %>%
filter(row_number() == nrow(WC)) %>% pull(value)
change_in_WC <- WC_new - WC_old
FCFF <- NI + Dep_Expense - CAPEX - change_in_WC
return(FCFF)
#' @title Calculate_FCFF
#' @description The function calculates the free cash flow to firm (FCFF) using the cash flow financials from GetCashFlow function and the Morningstar data.
#'              The FCFF is calculated from the Net Income, Change in working capital, depreciation expense and Capital expenditures (CAPEX).
#' @param Ticker Ticker of the stock to be evaluated
#' @param year Year to calculate FCFF for
#' @export
#' @seealso \code{\link[finreportr]{GetCashFlow()}}
#' @return FCFF Returns the calculated FCFF
#' @examples
Calculate_FCFF <- function(Ticker, year) {
# Get Cash flow and Income Statement data
CF_Data <- GetCashFlow(Ticker, year)
Fin <- tq_get(Ticker, get = "Key.ratios") %>%
filter(section == "Financials") %>%
select(data) %>% unnest()
# Only include data from the year provided by user
CF_Data <- CF_Data %>%
mutate(What_Year = year(endDate)) %>%
filter(What_Year == year)
# Start by finding the NI
NI <- CF_Data %>%
filter(Metric == "Net Income (Loss) Attributable to Parent")
# Only keep most recent number
if (nrow(NI) > 1) {
NI <- as.numeric(NI %>% filter(row_number() == nrow(NI)) %>% pull(Amount))
} else{
NI <- as.numeric(NI  %>% pull(Amount))
}
# Get the CAPEX
CAPEX <- as.numeric(CF_Data %>%
filter(Metric == "Payments to Acquire Property, Plant, and Equipment") %>% pull(Amount))
# Get Depreciation expense
Dep_Expense <- as.numeric(CF_Data %>%
filter(Metric == "Depreciation, Amortization and Accretion, Net") %>% pull(Amount))
# Calculate the change in working capital
WC <- Fin %>%
filter(category == "Working Capital USD Mil")
WC_old <- WC %>%
filter(row_number() == (nrow(WC) - 1)) %>% pull(value)
WC_new <- WC %>%
filter(row_number() == nrow(WC)) %>% pull(value)
change_in_WC <- WC_new - WC_old
# Calculate FCFF
FCFF <- NI + Dep_Expense - CAPEX - change_in_WC
return(FCFF)
}
Calculate_FCFF(Ticker, year)
#' @title FCFF_Basic
#' @description Basic valuation of a company using the free cash flow to firm. Value = (FCFF(1+g))/(WACC - g)
#' @param Ticker The ticker of the stock to be evaluated
#' @param WACC The WACC as a percentage
#' @param growth_rate The growth rate g
#' @export
#' @seealso
#' @return FCFF_Value
#' @examples
FCFF_Basic <- function(Ticker, WACC, growth_rate) {
# Get data from Morningstar
MData <- tq_get(Ticker, get = "key.ratios")
# Get WACC from user
WACC <- WACC/100
# Get FCFF
FCFF <- MData %>%
filter(section == "Financials") %>%
select(data) %>% unnest() %>%
filter(category == "Free Cash Flow USD Mil")
FCFF_latest <- FCFF %>%
filter(row_number() == nrow(FCFF)) %>% pull(value)
# Calculate value
FCFF_Value <- (FCFF_latest*(1 + growth_rate))/(WACC - growth_rate)
return(FCFF_Value)
}
FCFF_Basic(Ticker, WACC, growth_rate)
WACC <- 12
growth_rate <- 0.11
FCFF_Basic(Ticker, WACC, growth_rate)
#' @title FCFE_Basic
#' @description Basic valuation of a company based on the FCFE. The FCFE is calculated by adjusting the FCFF by Net Borrowings
#' @param Ticker Ticker of the company to be evaluated
#' @param Req Required rate of return
#' @param year Year when latest results is available
#' @param growth_rate The growth rate g
#' @export
#' @seealso
#' @return FCFE_Value
#' @examples
FCFE_Basic <- function(Ticker, Req, year. growth_rate) {
# Get the required data
CF_Data <- GetCashFlow(Ticker, year)
CF_Data <- CF_Data %>%
mutate(What_Year = year(EndDate)) %>%
filter(What_Year == year)
MData <- tq_get(Ticker, get = "key.ratios") %>%
filter(section == "Financials") %>%
select(data) %>% unnest()
# Get the Net_Borrowings from the cash flow data
NB <- CF_Data %>%
filter(Metric == "Proceeds from Issuance of Long-term Debt") %>% pull(Amount)
# Calculate FCFE from the FCFF
FCFF <- MData %>%
filter(category == "Free Cash Flow USD Mil")
FCFF_latest <- FCFF %>%
filter(row_number() == nrow(FCFF)) %>% pull(value)
FCFE_latest <- FCFF_latest + NB
# Calculate Value
FCFE_Value <- (FCFE_latest*(1+growth_rate))/(Req - growth_rate)
return(FCFE_Value)
}
#' @title FCFE_Basic
#' @description Basic valuation of a company based on the FCFE. The FCFE is calculated by adjusting the FCFF by Net Borrowings
#' @param Ticker Ticker of the company to be evaluated
#' @param Req Required rate of return
#' @param year Year when latest results is available
#' @param growth_rate The growth rate g
#' @export
#' @seealso
#' @return FCFE_Value
#' @examples
FCFE_Basic <- function(Ticker, Req, year, growth_rate) {
# Get the required data
CF_Data <- GetCashFlow(Ticker, year)
CF_Data <- CF_Data %>%
mutate(What_Year = year(EndDate)) %>%
filter(What_Year == year)
MData <- tq_get(Ticker, get = "key.ratios") %>%
filter(section == "Financials") %>%
select(data) %>% unnest()
# Get the Net_Borrowings from the cash flow data
NB <- CF_Data %>%
filter(Metric == "Proceeds from Issuance of Long-term Debt") %>% pull(Amount)
# Calculate FCFE from the FCFF
FCFF <- MData %>%
filter(category == "Free Cash Flow USD Mil")
FCFF_latest <- FCFF %>%
filter(row_number() == nrow(FCFF)) %>% pull(value)
FCFE_latest <- FCFF_latest + NB
# Calculate Value
FCFE_Value <- (FCFE_latest*(1+growth_rate))/(Req - growth_rate)
return(FCFE_Value)
}
FCFE_Value <- FCFE_Value(Ticker,  Req, year. growth_rate)
#' @title FCFE_Basic
#' @description Basic valuation of a company based on the FCFE. The FCFE is calculated by adjusting the FCFF by Net Borrowings
#' @param Ticker Ticker of the company to be evaluated
#' @param Req Required rate of return
#' @param year Year when latest results is available
#' @param growth_rate The growth rate g
#' @export
#' @seealso
#' @return FCFE_Value
#' @examples
FCFE_Basic <- function(Ticker, Req, year, growth_rate) {
# Get the required data
CF_Data <- GetCashFlow(Ticker, year)
CF_Data <- CF_Data %>%
mutate(What_Year = year(EndDate)) %>%
filter(What_Year == year)
MData <- tq_get(Ticker, get = "key.ratios") %>%
filter(section == "Financials") %>%
select(data) %>% unnest()
# Get the Net_Borrowings from the cash flow data
NB <- CF_Data %>%
filter(Metric == "Proceeds from Issuance of Long-term Debt") %>% pull(Amount)
# Calculate FCFE from the FCFF
FCFF <- MData %>%
filter(category == "Free Cash Flow USD Mil")
FCFF_latest <- FCFF %>%
filter(row_number() == nrow(FCFF)) %>% pull(value)
FCFE_latest <- FCFF_latest + NB
# Calculate Value
FCFE_Value <- (FCFE_latest*(1+growth_rate))/(Req - growth_rate)
return(FCFE_Value)
}
FCFE_Value <- FCFE_Value(Ticker,  Req, year, growth_rate)
FCFE_Value <- FCFE_Basic(Ticker,  Req, year, growth_rate)
library(EquityR)
?EquityR
?EquityR
?Plot_Ratios()
?Calculate_FCFF
